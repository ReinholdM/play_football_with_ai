# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import malib.rpc.proto.exprmanager_pb2 as proto_dot_exprmanager__pb2


class ExperimentManagerRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTable = channel.unary_unary(
            "/rpc.ExperimentManagerRPC/CreateTable",
            request_serializer=proto_dot_exprmanager__pb2.TableName.SerializeToString,
            response_deserializer=proto_dot_exprmanager__pb2.TableKey.FromString,
        )
        self.SendText = channel.unary_unary(
            "/rpc.ExperimentManagerRPC/SendText",
            request_serializer=proto_dot_exprmanager__pb2.Text.SerializeToString,
            response_deserializer=proto_dot_exprmanager__pb2.SendReply.FromString,
        )
        self.SendScalar = channel.unary_unary(
            "/rpc.ExperimentManagerRPC/SendScalar",
            request_serializer=proto_dot_exprmanager__pb2.Scalar.SerializeToString,
            response_deserializer=proto_dot_exprmanager__pb2.SendReply.FromString,
        )
        self.SendImage = channel.stream_unary(
            "/rpc.ExperimentManagerRPC/SendImage",
            request_serializer=proto_dot_exprmanager__pb2.Binary.SerializeToString,
            response_deserializer=proto_dot_exprmanager__pb2.SendReply.FromString,
        )
        self.SendBinaryTensor = channel.stream_unary(
            "/rpc.ExperimentManagerRPC/SendBinaryTensor",
            request_serializer=proto_dot_exprmanager__pb2.Binary.SerializeToString,
            response_deserializer=proto_dot_exprmanager__pb2.SendReply.FromString,
        )
        self.SendObj = channel.stream_unary(
            "/rpc.ExperimentManagerRPC/SendObj",
            request_serializer=proto_dot_exprmanager__pb2.Binary.SerializeToString,
            response_deserializer=proto_dot_exprmanager__pb2.SendReply.FromString,
        )


class ExperimentManagerRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendScalar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendBinaryTensor(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendObj(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ExperimentManagerRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateTable": grpc.unary_unary_rpc_method_handler(
            servicer.CreateTable,
            request_deserializer=proto_dot_exprmanager__pb2.TableName.FromString,
            response_serializer=proto_dot_exprmanager__pb2.TableKey.SerializeToString,
        ),
        "SendText": grpc.unary_unary_rpc_method_handler(
            servicer.SendText,
            request_deserializer=proto_dot_exprmanager__pb2.Text.FromString,
            response_serializer=proto_dot_exprmanager__pb2.SendReply.SerializeToString,
        ),
        "SendScalar": grpc.unary_unary_rpc_method_handler(
            servicer.SendScalar,
            request_deserializer=proto_dot_exprmanager__pb2.Scalar.FromString,
            response_serializer=proto_dot_exprmanager__pb2.SendReply.SerializeToString,
        ),
        "SendImage": grpc.stream_unary_rpc_method_handler(
            servicer.SendImage,
            request_deserializer=proto_dot_exprmanager__pb2.Binary.FromString,
            response_serializer=proto_dot_exprmanager__pb2.SendReply.SerializeToString,
        ),
        "SendBinaryTensor": grpc.stream_unary_rpc_method_handler(
            servicer.SendBinaryTensor,
            request_deserializer=proto_dot_exprmanager__pb2.Binary.FromString,
            response_serializer=proto_dot_exprmanager__pb2.SendReply.SerializeToString,
        ),
        "SendObj": grpc.stream_unary_rpc_method_handler(
            servicer.SendObj,
            request_deserializer=proto_dot_exprmanager__pb2.Binary.FromString,
            response_serializer=proto_dot_exprmanager__pb2.SendReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "rpc.ExperimentManagerRPC", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ExperimentManagerRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTable(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rpc.ExperimentManagerRPC/CreateTable",
            proto_dot_exprmanager__pb2.TableName.SerializeToString,
            proto_dot_exprmanager__pb2.TableKey.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SendText(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rpc.ExperimentManagerRPC/SendText",
            proto_dot_exprmanager__pb2.Text.SerializeToString,
            proto_dot_exprmanager__pb2.SendReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SendScalar(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/rpc.ExperimentManagerRPC/SendScalar",
            proto_dot_exprmanager__pb2.Scalar.SerializeToString,
            proto_dot_exprmanager__pb2.SendReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SendImage(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/rpc.ExperimentManagerRPC/SendImage",
            proto_dot_exprmanager__pb2.Binary.SerializeToString,
            proto_dot_exprmanager__pb2.SendReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SendBinaryTensor(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/rpc.ExperimentManagerRPC/SendBinaryTensor",
            proto_dot_exprmanager__pb2.Binary.SerializeToString,
            proto_dot_exprmanager__pb2.SendReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SendObj(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/rpc.ExperimentManagerRPC/SendObj",
            proto_dot_exprmanager__pb2.Binary.SerializeToString,
            proto_dot_exprmanager__pb2.SendReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
